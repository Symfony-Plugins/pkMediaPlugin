Make broken videos and images visible as such to those with editing privileges
* Validate the URL (this fixes the dukelink "bug")
* A way to detect an already-selected image and set a class on it
Implement tag typeahead
* Lock type for select
After John styles form, implement UI for locked type
* Upload progress bar OR implement individual inline upload iframes

* * * 

Lengthy notes on solved problems:

The problem: multiple file upload and validation in a Symfony 1.2 way.

Notes on the solution...

embedForm seems like a natural.

for i 0...max
  embedform file-i

We want to be a little bit modal at the top level of this form...

In the upload state, we don't actually display any of the metadata widgets.
We display only the file widgets.

In the metadata state, we display both.

On the initial transition from upload to metadata, we don't 
want to display validation errors for the metadata. 

The solution looks like this:

if (isValid)
  if 'phase' = 'upload'
    setValue('phase', 'metadata')
  else
    save()
    redirect()

Sanity requires that they all be in the same phase... or does it?
I don't see any requirement for that. We should however unset
those subforms for which nothing was submitted... do we have to?
We could let javascript do that.

If I don't force them all to be in the same phase then I can 
solve the whole problem for a single form before I move on to
solving it for many objects.

* * *

THE UPLOAD ISSUE
Man this is annoying.
Okay:

The Symfony form architecture depends on the idea that the browser will
redisplay previous values for form fields when intermediate validation
errors occur.

But that is not possible when one of the fields is a file selector.

And even if it were possible, uploading files over and over is
painfully inefficient.

Possible fixes:

Patch things so that file uploads really do persist. The idea is this: 
when generating a file input element, we also put out a hidden form element
containing the preexisting filename (according to the client). 
At save time, if we don't see the file but we do see the hidden element,
then we look in a user-specific cache to see if there's a preexisting 
file there. The validator would be able to see the hidden element and
approve the whole schmeer if the cached file it points to is cool
(and meets the same criteria).

The save() method of the enhanced file widget would be smart enough to
use the cached file when there is no new file.

EOS.

Implement graceful handling of deleted media items
  via the return of a transparent GIF, of a size that
  applications can recognize intelligently
We're using pkUrlTools, so it has to come up out of the trinity
  lib and into a plugin
Implement basic privileges
* Make sure service URLs are in fact URL-safe (the youtube one)
  (We're trusting youtube itself though when we canonicalize)
Make sure all data entry is escaped properly on redisplay (store as HTML?)
* Delete feature (duh)
* A way to edit an existing media item!
  (Don't let them change the type as that could have weird
  consequences elsewhere)
* Implement "show" page for individual media items
* Make sure you can get back up from there
* Dead-simple YouTube video support
* Write slot
Ability to select images only or videos only or allow either
* Make YouTube video work
Video searches
* Clickthrough on thumbnail rather than autoplay in index page
Restrict video searches to those that are embeddable
Interface with John
Tag typeahead
Upload progress
Upload reuse
Upload multiple


